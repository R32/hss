/*
 *  Hss Format
 *  Copyright (c)2008 Nicolas Cannasse
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License or the LICENSE file for more details.
 */
open Hss.Ast;

exception Error : (string, pos) list;

type context {
	mutable vars : (string,value) Map.t;
	mutable blocks : (string,expr list) Map.t;
	mutable eval_rec : int;
	mutable skip_calc: int; // 0: no skip, 1: skip "/" (default), 2 : skip ALL
	mutable ns : string option;
	mutable curblock : class option;
}

var pathtools : Hss.Utils.pathtools = Hss.Utils.pathtools
var rgbtools : Hss.Utils.rgbtools = Hss.Utils.rgbtools
var base64 : Hss.Utils.base64 = Hss.Utils.base64
var pmod : Hss.Utils.print_mode = Hss.Utils.pmod
var sem : Hss.Utils.sourcemap = Hss.Utils.sem
var misc : Hss.Utils.misc = Hss.Utils.misc
var hssparse = Hss.Parser.parse Hss.Parser.program
var rules_loaded = Hss.Rules.loaded

function error(msg,p) {
	throw Error([(msg,p)])
}

function rec print_sep(str, f, ch, l) {
	match l {
	| [] ->
	| [e] -> f ch e
	| e::tl ->
		f ch e;
		sem.write ch str;
		print_sep str f ch tl
	}
}

function warning(msg,p) {
	IO.printf IO.stderr "%s:%d: %s\n" (Lexer.source p,Lexer.line p,msg);
}

function rec print_value(ch,v) {
	match fst v {
	| VIdent i    -> sem.write ch i
	| VString s   -> sem.write ch sprintf("\"%s\"", s)
	| VUnit (v,u) -> sem.write ch sprintf("%f%s", (v,u));
	| VFloat f    -> sem.write ch sprintf("%f", f);
	| VInt i      -> sem.write ch sprintf("%d", i);
	| VHex s      -> sem.write ch sprintf("#%s", s);
	| VBind (n,v) ->
		sem.write ch sprintf("%s=", n);  print_value ch v
	| VList l ->
		print_sep pmod.cur.comma print_value ch l
	| VGroup l ->
		print_sep " " print_value ch l
	| VUrl url ->
		sem.write ch sprintf("url(\"%s\")", url)
	| VVar s ->
		sem.write ch sprintf("$%s", s)
	| VCall (v,vl) ->
		print_value ch v;  sem.write ch "(";  print_value ch vl;  sem.write ch ")";
	| VLabel ("dup",v) ->
		print_value ch v;
	| VLabel (l,v) ->
		print_value ch v;  sem.write ch sprintf(" !%s", l);
	| VParentheses v ->
		sem.write ch "(";  print_value ch v;  sem.write ch ")";
	| VOp (op,v1,v2) ->
		print_value ch v1;  sem.write ch sprintf(" %s ", s_op op);  print_value ch v2;
	}
}

var r_ident = Regexp.build("^[a-zA-Z_][-a-zA-Z0-9_]*$");

function att_op_str(op) {
	function quote(v) if Regexp.find r_ident v 0 (String.length v) then v else "\""+v+"\"";
	match op {
	| AExists    -> ""
	| AEqual v   ->  "=" + quote(v)
	| AContain v -> "~=" + quote(v)
	| ADash v    -> "|=" + quote(v)
	| ABegin v   -> "^=" + quote(v)
	| AEnd v     -> "$=" + quote(v)
	| ASubstr v  -> "*=" + quote(v)
	}
}

function rec print_class(first,ch,c) {
	if !first then
		sem.write ch (match c.operator {
		| OpDefault -> " "
		| OpChild -> pmod.cur.gt
		| OpPreceding imm -> if imm then pmod.cur.plus else pmod.cur.tild
		| OpJoint -> ""
		})
	match c.node {
	| None -> ()
	| Some(id,_) -> sem.write ch id;
	}
	List.iter (function(((att,op),_)) {
		sem.write ch sprintf("[%s%s]", (att, att_op_str op))
	}) c.attributes;
	match c.id {
	| None -> ()
	| Some(id,_) -> sem.write ch sprintf("#%s", id);
	}
	List.iter (function((c,_)) sem.write ch sprintf(".%s", c)) c.classes;
	List.iter (function((sel,_)){
		match sel {
		| PuClass s -> sem.write ch sprintf(":%s", s);
		| PuElement s -> sem.write ch sprintf("::%s", s);
		| PuClassFn(s, a) -> sem.write ch sprintf(":%s(%s)", (s, a))
		}
	}) (List.rev c.selector);
	match c.sub {
	| None -> ()
	| Some cs ->
		print_class false ch cs;
	}
}

function rec print_media(ch, m) {
	match fst m {
	| MAnd(m1, m2) -> print_media ch m1; sem.write ch (" " + "and" + " "); print_media ch m2
	| MType(s, None) -> sem.write ch s;
	| MType(s, Some op) -> sem.write ch (op + " " + s);
	| MFeature(s, None) -> sem.write ch ("(" + s + ")")
	| MFeature(s, Some v) ->
		sem.write_char ch '(';  sem.write ch s;  sem.write ch pmod.cur.colon;
		match fst v {
		| VString s -> sem.write ch s;
		| _ -> print_value ch v;
		}
		sem.write_char ch ')'
	| MQuotes s -> sem.write ch s;
	| MList l -> print_sep pmod.cur.comma print_media ch l
	}
}

function rec print_css(ch,tabs,e) {
	match fst e {
	| EAttribute(name,val) ->
		sem.write ch tabs;
		sem.pick_begin(snd e);    (sem.write ch name);   sem.pick_end();  (sem.write ch pmod.cur.colon);
		sem.pick_begin(snd val);  (print_value ch val);  sem.pick_end();  (sem.write_char ch ';');  (pmod.cur.crlf ch);
	| EBlock(classes,el) ->
		var p = snd e;
		sem.write ch tabs;
		sem.pick_begin p;  (print_sep pmod.cur.comma (print_class true) ch classes);  sem.pick_end();
		sem.write ch pmod.cur.lbrace;  (pmod.cur.crlf ch);
		List.iter (print_css ch (tabs+pmod.cur.tab)) el;
		sem.write ch tabs;  sem.write ch pmod.cur.rbrace;  (pmod.cur.crlf ch)
	| ESub el ->
		List.iter (print_css ch tabs) el
	| EMedia (v,el) ->
		match el {
		| [] ->
		| _ ->
			sem.pick_begin Lexer.punion(snd e, snd v);
			sem.write ch "@media";  sem.write_char ch ' ';  print_media ch v;
			sem.pick_end();
			sem.write ch pmod.cur.lbrace;  (pmod.cur.crlf ch);
			List.iter (print_css ch (tabs+pmod.cur.tab)) el;
			sem.write ch tabs;  sem.write ch pmod.cur.rbrace;  (pmod.cur.crlf ch)
		}
	| EInclude s ->
		sem.write ch tabs;
		sem.pick_begin(snd e);  (sem.write_extern ch s);  sem.pick_end();
		(pmod.cur.crlf ch);
	| EImport s ->
		(pmod.normal.crlf ch);
		sem.pick_begin (snd e); // note: cannot map pure css files
		try sem.write_extern ch IO.file_contents(s) catch { _ -> error("file error: " + s, snd e) }
		sem.pick_end();
		(pmod.normal.crlf ch);
	| EKeyframes (name, ks) ->
		sem.write ch tabs;
		sem.pick_begin(snd e);
		sem.write ch "@keyframes";  sem.write_char ch ' ';  sem.write ch name;
		sem.pick_end();
		sem.write ch pmod.cur.lbrace;  (pmod.cur.crlf ch);
		List.iter (print_keyframe ch (tabs+pmod.cur.tab)) ks;
		sem.write ch tabs;  sem.write ch pmod.cur.rbrace;  (pmod.cur.crlf ch)
	| EVar _ | EVarBlock _ | EUseBlock _ ->
	}
}

function rec print_keyframe(ch, tabs, k) {
	sem.write ch tabs;
	sem.pick_begin(snd (fst k));
	match fst (fst k) {
	| VIdent i -> sem.write ch i;
	| VUnit(f, _) -> sem.write ch (f + "%")
	| _->
	}
	sem.pick_end();
	sem.write ch pmod.cur.lbrace; (pmod.cur.crlf ch);
	List.iter print_css(ch, tabs+pmod.cur.tab) (snd k);
	sem.write ch tabs;  sem.write ch pmod.cur.rbrace;  (pmod.cur.crlf ch)
}

function rec make_sub(p,c) {
	{
		node = p.node;
		id = p.id;
		classes = p.classes;
		selector = p.selector;
		attributes = p.attributes;
		operator = p.operator;
		sub = match p.sub {
			| None -> Some c
			| Some p -> Some (make_sub p c)
		};
	}
}

function rec flatten_subs(acc,e) {
	match fst e {
	| EAttribute _ -> e :: acc
	| ESub el -> List.fold flatten_subs acc el
	| _ -> acc
	}
}

function rec flatten(parents,e) {
	match fst e {
	| EVar _ | EAttribute _ | EUseBlock _ | EVarBlock _ -> []
	| ESub el ->
		List.concat (List.map (flatten parents) el)
	| EBlock (classes,el) ->
		var classes = match parents {
			| [] -> classes
			| l -> List.concat (List.map (function(p) List.map (make_sub p) classes) parents)
		}
		var attribs = List.rev (List.fold flatten_subs [] el);
		var el = List.concat (List.map (flatten classes) el);
		match attribs {
		| [] -> el
		| _ -> (EBlock classes attribs,snd e) :: el
		}
	| EMedia (str,el) ->
		var attribs = List.rev (List.fold flatten_subs [] el);
		var el = List.concat (List.map (flatten parents) el);
		var el = match (parents,attribs) {
		| (_::_, _::_) -> (EBlock parents attribs,snd e) :: el
		| _ -> el
		}
		[(EMedia(str, el),snd e)]
	| EInclude s ->
		var s = match parents {
			| [] -> s
			| l ->
				var ch, out = IO.write_string();
				List.iter (function(c) { print_class true ch c; IO.write ch " "; }) l;
				out() + s
		}
		[(EInclude s,snd e)]
	| EImport _ | EKeyframes _ ->
		[e]
	}
}

var check_errors = &[];

function check_errors_add(e) check_errors := e :: *check_errors;

function rec check_inherit(v) {
	match (fst v) {
	| VLabel (_,v) -> check_inherit v
	| VIdent n -> n == "inherit" || n == "initial" || n == "unset"
	| _ -> false
	}
}

function rules_htable(name) {
	Map.find Hss.Rules.context.rules name
}

var rules_globals = Hss.Rules.globals
var rules_special = Hss.Rules.special

function rules_special_exists(attribute, subid) {
	try {
		function equals(r) match fst r {
		| RId s -> subid == s
		| _ -> false
		}
		var r = Hashtbl.find rules_special attribute
		match fst r {
		| RList l | RGroup l | ROr l -> List.exists equals l
		| _ -> equals r
		}
	} catch {
	| Not_found -> false
	}
}

function find_rule(ctx, name, value) {
	try {
		match fst value {
		| VLabel(_, (VIdent id,_))
		| VIdent id -> if rules_special_exists "default" id then throw Exit
		| _ ->
		}
		Hashtbl.find rules_globals name
	} catch {
	| Not_found ->
		match ctx.curblock {
		| Some c ->
			var rf = &None;
			var k = match c.selector { // ::before, :hover, :active
			| (PuClass s,_) :: _ -> ":" + s
			| (PuElement s,_) :: _ -> "::" + s
			| _ -> "$"
			}
			try rf := Some(Hashtbl.find (rules_htable k) name) catch {| Not_found -> }
			match *rf {
			| Some r -> r
			| None ->
				var k = match c.node {| Some(n, _) -> n | _ -> "$" }
				Hashtbl.find (rules_htable k) name
			}
		| _ ->
			throw Not_found
		}
	}
}

// Prevents something like 2.999999999999
function before_floor(f) {
	if f >= 0. then f + 0.0000001 else f - 0.0000001
}

function rgb_value( (v,p) : value ) {
	match v {
	| VHex h ->
		rgbtools.of_hex h p
	| VCall((VIdent "rgb",_), (VList[r; g; b], _))
	| VCall((VIdent "rgba",_),(VList[r; g; b; (VFloat _,_)], _)) ->
		function mono((v, p)) {
			var i = match v {
			| VInt i -> i
			| VFloat f -> Math.floor(before_floor f)
			| VUnit (f,"%") -> Math.floor(before_floor(f * 2.55))
			| _ -> check_errors_add ("Unexpected " + (s_value (v,p)), p); 0
			}
			if i < 0 || i > 255 then check_errors_add ("Unexpected " + (s_value (v,p)), p);
			i
		}
		(mono r, mono g, mono b)
	| _ ->
		check_errors_add ("Unexpected " + (s_value (v,p)), p);
		(0,0,0)
	}
}

function custom_calls(id, vi, v, p) {
	function mix(ds, dl) {
		match v {
		| (VList[color; (VUnit(i,"%"),_)], p) ->
			var rgb = rgb_value color;
			var h, s, l = rgbtools.to_hsl rgb
			var rgb = rgbtools.of_hsl (h, i*ds + s, i*dl + l);
			(VHex(rgbtools.string rgb), p)
		| _ ->
			v
		}
	}
	var origin = (VCall vi v, p)
	match id {
	| "lighten"    -> mix( 0.  ,  0.01)
	| "darken"     -> mix( 0.  , -0.01)
	| "saturate"   -> mix( 0.01,  0.  )
	| "desaturate" -> mix(-0.01,  0.  )
	| "invert"     ->
			var r, g, b = rgb_value v;
			(VHex(rgbtools.string (255 - r, 255 - g, 255 - b)), snd v)
	| "alphamix"   -> match v {
		| (VList[f; (VFloat a, _); b], p) -> (VHex(rgbtools.string rgbtools.alpha_mix(rgb_value f, a, rgb_value b)), p)
		| _ -> origin
		}
	| "string" -> (VString(s_value v), snd v)
	| "int" -> match v {
		| (VFloat f, p) -> (VInt Math.floor(before_floor f), p)
		| (VUnit(f,u), p) -> (VUnit Math.ffloor(before_floor f) u, p)
		| _ -> origin
		}
	| _ -> origin
	}
}

function rec eval(ctx,v) {
	match fst v {
	| VIdent _
	| VString _
	| VUnit _
	| VUrl _
	| VInt _
	| VFloat _
	| VHex _ -> v
	| VList vl ->
		function rec loop(vl) match vl {
		| [] -> vl
		| v :: tl ->
			var v = eval ctx v;
			match fst v {
			| VList l -> List.append (loop l) (loop tl)
			| _ -> v :: loop tl
			}
		}
		(VList (loop vl),snd v)
	| VGroup vl ->
		(VGroup (List.map (eval ctx) vl),snd v)
	| VVar name ->
		if ctx.eval_rec > 100 then error "Invalid loop in variable expension" snd(v);
		var val = (try Map.find ctx.vars name catch { Not_found -> error ("Variable not declared '" + name + "'") snd(v) });
		ctx.eval_rec := ctx.eval_rec + 1;
		var r = eval ctx val;
		ctx.eval_rec := ctx.eval_rec - 1;
		r
	| VCall(i,vl) ->
		var i = match eval ctx i { | (VString s,p)->(VIdent s,p) | i->i }; // strip quotes
		var id = match (fst i) { | VIdent n -> n | _ -> "" }
		var prev = ctx.skip_calc;
		ctx.skip_calc := match id { "int" -> 0 | "calc" -> 2 | _ -> prev };
		var vl = eval ctx vl;
		ctx.skip_calc := prev;
		custom_calls id i vl (snd v)
	| VLabel (l,v1) ->
		(VLabel l (eval ctx v1), snd v)
	| VBind(name,v1) ->
		(VBind name (eval ctx v1), snd v)
	| VParentheses e ->
		if ctx.skip_calc == 2 then // keep "()" for CSS "calc(expr)"
			(VParentheses (eval ctx e), snd v)
		else {
			var prev = ctx.skip_calc;
			ctx.skip_calc := 0;
			var v = eval ctx e;
			ctx.skip_calc := prev;
			v
		}
	| VOp (op,v1,v2) ->
		var v1 = eval ctx v1;
		var v2 = eval ctx v2;
		function fop (x:float,y:float) {
			match op {
			| Add -> x + y
			| Sub -> x - y
			| Mul -> x * y
			| Div -> if y == 0. then error "Division by 0" snd(v) else x / y
			| And | Or | Xor | BoolOr | BoolAnd -> error ("UnSupported "+"Op: "+s_op op) snd(v)
			}
		};
		function rec loop(v1,v2) {
			match (fst v1,fst v2) {
			| (VInt x, VInt y) -> VFloat fop(x * 1.0, y * 1.0)
			| (VInt x, VFloat y) -> VFloat (fop (x * 1.0) y)
			| (VFloat x, VInt y) -> VFloat (fop x (y * 1.0))
			| (VFloat x, VFloat y) -> VFloat (fop x y)
			| (VUnit (x,u), VUnit (y,u2)) when u == u2 -> VUnit (fop x y) u
			| (VUnit (x,u), VInt y) -> VUnit (fop x (y * 1.0)) u
			| (VUnit (x,u), VFloat y) -> VUnit (fop x y) u
			| (VInt x, VUnit (y,u)) -> VUnit (fop (x * 1.0) y) u
			| (VFloat x, VUnit (y,u)) -> VUnit (fop x y) u
			| (VHex c, VFloat a) ->
				// assume color operation
				function color(c:int) {
					var c = Math.round (fop (c * 1.0) a);
					if c < 0 then 0 else if c > 255 then 255 else c;
				}
				var r, g, b = rgbtools.of_hex(c, snd v1);
				VHex (rgbtools.string (color r, color g, color b))
			| (_,VLabel (l,v)) ->
				VLabel l (loop v1 v, snd v)
			| _ ->
				error ("'" + (s_value v) + "' are not allowed") snd(v)
			}
		}
		if (op == Div && ctx.skip_calc == 1) || ctx.skip_calc == 2 then
			(VOp op v1 v2,snd v)
		else
			(loop v1 v2,snd v)
	}
}

function rec eval_block(ctx,b) {
	function add(r,v2) {
		r := fst (eval ctx (VOp Add (*r,snd v2) v2,snd v2))
	}
	function get_block_sizes(el) {
		var matched = Hashtbl.create();
		function set(k) {
			if Hashtbl.exists matched k then false else {
				Hashtbl.add matched k ();
				true;
			}
		}
		var lr = &(VInt 0);
		var tb = &(VInt 0);
		List.iter (function(e) {
			match fst e {
			| EAttribute (name,v) ->
				match name {
				| "padding-left" when set "pl" -> add lr v
				| "padding-right" when set "pr" -> add lr v
				| "padding-top" when set "pt" -> add tb v
				| "padding-bottom" when set "pb" -> add tb v
				| "padding" ->
					var t, r, b, l = match fst v {
					| VGroup [tb;rl] -> (tb, rl, tb, rl)
					| VGroup [t;rl;b] -> (t, rl, b, rl)
					| VGroup [t;r;b;l] -> (t, r, b, l)
					| _ -> (v, v, v, v)
					}
					if set "pl" then add lr l;
					if set "pr" then add lr r;
					if set "pt" then add tb t;
					if set "pb" then add tb b;
				| "border-left-width" when set "bl" -> add lr v
				| "border-right-width" when set "br" -> add lr v
				| "border-top-width" when set "bt" -> add tb v
				| "border-bottom-width" when set "bb" -> add tb v
				| "border" ->
					var v = match fst v {
						| VGroup (v :: _) -> v
						| _ -> v
					};
					if set "bl" then add lr v;
					if set "br" then add lr v;
					if set "bt" then add tb v;
					if set "bb" then add tb v;
				| _ -> ()
				}
			| _ -> ()
			}
		}) (List.rev el);
		(*lr, *tb)
	}
	match fst b {
	| EBlock (cl,el) ->
		var el = List.map (function(e) {
			match fst e {
			| EAttribute (name,val) ->
				var p = snd val;
				match name {
				| "hss-width" ->
					var w, _ = get_block_sizes el;
					(EAttribute("width", eval ctx (VOp(Sub,val,(w,p)),p)),p)
				| "hss-height" ->
					var _, h = get_block_sizes el;
					(EAttribute("height", eval ctx (VOp(Sub,val,(h,p)),p)),p)
				| _ -> e
				}
			| _ -> assert()
			}
		}) el;
		(EBlock cl el, snd b)
	| EMedia (ml,el) ->
		(EMedia ml (List.map (eval_block ctx) el), snd b)
	| _ ->
		b
	}
}

function rec expand_val(value) {
	var p = snd value;
	match fst value {
	| VCall((VIdent "rgba",_) as c, (VList[(VHex h,hp);(VFloat f,fp)], lp)) ->
		var r, g, b = rgbtools.of_hex h hp;
		var params = (VList[(VInt r,hp);(VInt g,hp);(VInt b,hp);(VFloat f,fp)], lp);
		expand_val (VCall c params, p)
	| VCall((VIdent "embed",p1), (VList[(VString url, p2)], lp)) ->
		(VCall (VIdent "url",p1) (VList[(VString base64.encode_image(url, p2), p2)], lp), p)
	| VCall (v, vl) ->
		(VCall expand_val(v) (expand_val vl), p)
	| VList vl ->
		(VList (List.map expand_val vl),p)
	| VGroup vl ->
		(VGroup (List.map expand_val vl),p)
	| VLabel (l,v) ->
		(VLabel l expand_val(v),p)
	| VBind (name,v) ->
		(VBind name expand_val(v),p)
	| VOp (op,v1,v2) ->
		(VOp op expand_val(v1) expand_val(v2),p)
	| VUnit(0., u) ->
		if (u == "s" || u == "ms" || u == "%") then value else (VInt 0, p)
	| _ ->
		value
	}
}


function rec expand_hacks(name,value,p) {
	var label = &None;
	var value = match fst value {
		| VLabel(l,v) -> label := Some (l,snd value); v;
		| _ -> value;
	}
	var value = expand_val value;
	var w = match name {
	| "background-color" | "color" | "background" ->
		var first = match fst value { VGroup v :: l -> v | _ -> value };
		match fst first {
		| VCall ((VIdent "rgba",_), _) ->
			var hcol = rgbtools.string (rgb_value first);
			(ESub [
				(EAttribute name (VHex hcol,p),p); // simply adds a fallback with fixed hex color
				(EAttribute name value,p);
			],p)
		| _ ->
			(EAttribute name value,p)
		}
	| _ ->
		(EAttribute name value,p)
	}
	match *label {
	| None -> w
	| Some (label,p) ->
		function rec wrap(e) {
			(match fst e {
			| ESub el -> ESub (List.map wrap el)
			| EAttribute (name,v) -> EAttribute name (VLabel label v,p)
			| _ -> assert()
			},snd e)
		}
		wrap w
	}
}

function rec expand_ns(ns,c) {
	c.classes := List.map ( function((c:string,p)) (ns + c,p) ) c.classes;
	match c.id {
	| None -> ()
	| Some (id,p) -> c.id := Some (ns + id,p)
	}
	match c.sub {
	| None -> ()
	| Some c -> expand_ns ns c
	}
}

function rec check_class(ctx, c) {
	List.iter (function((sel,p)){
		match sel {
		| PuElement s ->
			if !(List.mem(s, Hss.Lexer.pseudo_elements) || (snd misc.vendor_prefix(s) != "")) then
				check_errors_add ("Invalid '" + "::" + s + "'", p);
		| _ ->
		}
	}) c.selector
	match c.sub {
	| None -> ()
	| Some c -> check_class ctx c
	}
}

function rec find_subclass(c: class) {
	match c.sub {
	| Some sc -> find_subclass sc
	| None -> c
	}
}

function load_rules(find, name, value, pos) {
	try {
		var rule = find name value
		var stack = &[];
		var succ = Hss.Rules.check stack value rule && *stack == [];
		if !succ then {
			var value = if (*stack) != [] then List.hd (*stack) else value;
			check_errors_add ("Invalid '"+name+"' value '"+ (s_value value) +"'", snd value)
		}
	} catch {
	| Exit ->
	| Not_found -> if snd(misc.vendor_prefix name) == "" then
		check_errors_add ("Unknown attribute '" + name + "'", pos)
	| Invalid_argument s ->
		check_errors_add (s, pos)
	| Core.Error s ->
		check_errors_add (s + name, pos)
	}
}

function find_media_rules(name, value) {
	var tbl = try { rules_htable "media-queries" } catch { Not_found -> throw Exit }
	Hashtbl.find tbl name
}

function rec check_media(ctx, m: media) {
	var p = pos m;
	function err(s) check_errors_add ("Invalid '" + s + "'", p)
	match fst m {
	| MAnd(m1, m2) ->
		(MAnd(check_media ctx m1, check_media ctx m2), p);
	| MType(s, _) ->
		if !List.mem(String.lowercase s, ["all";"screen";"print";"speech"]) then err s;
		m
	| MFeature(s, None) ->
		try if !Hashtbl.exists(rules_htable "media-queries", String.lowercase s) then err s catch{ _ -> }
		m
	| MFeature(s, Some v) ->
		var v = eval ctx v;
		match fst v {
		| VString _ -> () // skip
		| _ -> if *rules_loaded then load_rules(find_media_rules, String.lowercase s, v, p)
		}
		(MFeature(s, Some v), p)
	| MQuotes _ ->
		m
	| MList l ->
		(MList List.map(check_media ctx, l), p)
	}
}

function rec check(ctx,e) {
	match fst e {
	| EVar ("namespace",value) ->
		match fst value {
		| VString s -> ctx.ns := Some s;
		| _ -> error ("String value require for " + "namespace") snd(value);
		}
		e
	| EVar (name,value) ->
		ctx.vars := Map.add ctx.vars name value;
		e
	| EVarBlock (name,el) ->
		ctx.blocks := Map.add ctx.blocks name el;
		e
	| EBlock (classes,el) ->
		match ctx.ns {
		| None -> ()
		| Some ns -> List.iter (expand_ns ns) classes
		}
		var old = (ctx.vars,ctx.blocks);
		var old2 = (ctx.ns, ctx.curblock);
		ctx.curblock := match classes { a::_ -> Some(find_subclass a) | _ -> None };
		var el = List.map (check ctx) el;
		List.iter (check_class ctx) classes;
		// check duplicate variables
		if (*rules_loaded) && !(rules_special_exists "duplicate-check" "off") then
			ignore(List.fold (function(acc, e) match fst e {
			| EAttribute(name, v) ->
				match fst v {
				| VLabel ("dup",_) -> acc
				| _ ->
					if (Map.exists acc name) && !(rules_special_exists "allow-duplicate-attributes" name) then
						warning ("Warning, duplicate attribute '" + name + "'") snd(e);
					Map.add acc name v
				}
			| _ -> acc
			}) Map.empty() el);
		ctx.vars := fst old;
		ctx.blocks := snd old;
		ctx.ns := fst old2;
		ctx.curblock := snd old2;
		(EBlock classes el,snd e)
	| EAttribute (name,value) ->
		var value = eval ctx value;
		var p = pos e;
		var value = match value {
		| (VCall ((VIdent "CSS",_),vl),_) ->
			var value = match fst vl { // strip CSS
			| VList[(VString s, p)] -> (VIdent s, p) // strip quotes
			| VList[value] -> value
			| _ -> vl
			}
			(VLabel "dup" value, p) // allow duplicate
		| _ ->
			if *rules_loaded then
				load_rules(find_rule ctx, name, value, p);
			value
		}
		expand_hacks(name, value, p)
	| EUseBlock(name, pl) ->
		var p = pos e;
		var b = try Map.find ctx.blocks name catch { Not_found -> error ("Variable not declared '" + name + "'") p };
		var old_ns, old_vars, old_blocks = (ctx.ns, ctx.vars, ctx.blocks);
		List.iter (function(v){
			match fst v {
			| VBind(name, value) -> ctx.vars := Map.add ctx.vars name value;
			| _ ->
			}
		}) pl;
		try {
			var b = List.map (check ctx) b;
			ctx.ns := old_ns;
			ctx.vars := old_vars;
			ctx.blocks := old_blocks;
			(ESub b, p)
		} catch {
		| Error l -> throw Error(("Included here ",p)::l)
		}
	| ESub el ->
		(ESub (List.map (check ctx) el),snd e)
	| EMedia (l,el) ->
		(EMedia (check_media ctx l) (List.map (check ctx) el), snd e)
	| EInclude _ ->
		e
	| EImport s ->
		var p = pos e;
		if s == "" then
			error("file error: " + "''", p);
		if ctx.curblock != None then error("Unexpected " + "@import" + " here", p)
		var parent = pathtools.find p;
		var file = if parent.dir == "" || pathtools.is_abs(s) then s else parent.dir + "/" + s;
		var ext = match parent.ext {| "scss" | "less"  -> parent.ext | _ -> "hss"}
		var path, added = pathtools.add(file, ext);
		match (added, path.ext) {
		| (false, _) ->
			(ESub [], p) // duplicate, simply ignore it
		| (_, "css") ->
			(EImport path.str, p)
		| _ ->
			var ch = try (IO.read_file path.full true) catch { _ -> error("file error: " + path.str, p) }
			var lex = Lexer.create Buffer.create();
			Lexer.input lex (path.str) ch 1 0;
			var el = hssparse lex;
			IO.close_in ch;
			var el = List.map (check ctx) el;
			(ESub el, p)
		}
	| EKeyframes (name, sl) ->
		if ctx.curblock != None then error("Unexpected " + "@keyframes" + " here", pos e)
		function rec loop(l) match l {
		| [] -> l
		| seg :: l -> match fst seg {
			| (VIdent i,p) -> if !(i == "from" || i == "to") then check_errors_add ("Unexpected " + i, p)
			| (VUnit (f, u),p) -> if (f < 0. || f > 100.) then check_errors_add ("Unexpected " + f + u, p)
			| _ -> // never run to here since Parser
			}
			var attribs = List.rev List.fold(flatten_subs, [], snd seg); // only attributes
			if attribs == [] then loop l else (fst seg, List.map(check ctx, attribs)) :: loop l
		}
		var sl = loop sl;
		if sl == [] then (ESub [], pos e) else (EKeyframes(name, sl), pos e)
	}
}

function merge_media(el) {
	function rec filter(l, out) match l {
	| [] -> l
	| v :: l -> match fst v {
		| EMedia(m,e) ->
			var ch, str = IO.write_string();
			print_media ch m;
			out := (str(), e, m, pos v) :: *out;  // (str, el, ml, pos), str is used for compare
			filter l out
		| _ ->
			v :: (filter l out)
		}
	}
	function rec combine(l, ts, out) match l {
	| [] -> l
	| (s,e,_,_) :: tl ->
		if (s == ts) then {
			out := List.append(*out, e);
			combine tl ts out
		} else {
			(List.hd l) :: (combine tl ts out)
		}
	}
	function rec loop(l) match l {
	| [] -> []
	| (s,e,m,p) :: l ->
		var e = &e;
		var l = combine l s e;
		(EMedia(m, *e), p) :: loop l
	}
	var rl = &[];
	var xl = filter el rl;
	match *rl {
	| [] ->
		el
	| l ->
		List.append xl (loop (List.rev l))
	}
}

function display(msg,p) {
	if p == Lexer.null_pos then	{
		Stack.dump IO.stderr Stack.exc();
		IO.printf IO.stderr "Exception : %s\n" msg
	} else {
		var pc = Hss.Utils.rows.column(p);
		IO.printf IO.stderr "%s:%d: %d-%d: %s\n" (Lexer.source p, pc.lmin, pc.cmin, pc.cmax_on, msg);
	}
}

function report(msg,p) {
	display msg p;
	Sys.exit(-1);
}

try {
	var head = "HSS v2.0 - (c)2008-2023 Nicolas Cannasse\nUsage : hss [options] <file>";
	var files = &[];
	var output = &None;
	var decl = [
		("-output",Args.String (function(o) output := Some o),"<dir> : specify output directory");
		("-rule",Args.String Hss.Rules.custom,"<file>  : specify a css rule set file");
		("-D",Args.String Hss.Parser.add_defines,"<flag>     : define a conditional compilation flag");
		("--append",Args.Void Hss.Rules.append,"     : available only if '-rule <file>' is specified");
		("--minify",Args.Void pmod.enable_minify,"     : minify output by removing some whitespaces");
		("--sourcemap", Args.Void sem.switch_on,"  : outputs a v3 sourcemap file");
	];
	Args.parse head decl (function(file) files := file :: *files);

	List.iter (function(file) {
		var path,_ = pathtools.add file "";
		// load rules
		if !(*Hss.Rules.loaded) then Hss.Rules.load "css.rules" path.dir;
		// parse
		var ch = IO.read_file (path.str) true;
		var lex = Lexer.create Buffer.create();
		Lexer.input lex (path.str) ch 1 0;
		var el = hssparse lex;
		IO.close_in ch;
		// check + replace vars
		var ctx = { vars = Map.empty(); blocks = Map.empty(); eval_rec = 0; skip_calc = 1; ns = None; curblock = None; };
		var el = List.map (check ctx) el;
		if *check_errors != [] then throw Error(*check_errors);
		// flatten
		var el = List.concat (List.map flatten([]) el);
		// final eval
		var el = List.map eval_block(ctx) el;
		// combine/merge media queries if `-D merge_media`
		var el = if Hss.Parser.defines_has "merge_media" then merge_media el else el;
		// write
		var file2 = Sys.without_extension file + ".css";
		var file2 = match *output {| None -> file2 | Some dir -> (pathtools.add_slash dir) + (Sys.without_dir file2) }
		if file != file2 then {
			var fmap = file2 + ".map";
			var ch = IO.write_file file2 true;
			List.iter (print_css ch "") el;
			if sem.enabled then IO.write ch ("\n/*# sourceMappingURL=" + (Sys.without_dir fmap) + "*/");
			IO.close_out ch;
			if sem.enabled then {
				var ch = IO.write_file fmap true;
				sem.flush ch file2;
				IO.close_out ch;
			}
		}
		sem.reset();
		pathtools.reset()
	}) (*files);
} catch {
	// todo : fix a small bug in nekoml to have ctx.current not to lowercase
	// in order to get correct constructor hashing
	| Hss.Lexer.Error(msg,pos) -> report Hss.Lexer.error_msg(msg) pos
	| Hss.Parser.Error(msg,pos) -> report Hss.Parser.error_msg(msg) pos
	| Hss.Utils.Error(msg,pos) -> report msg pos
	| Error l -> List.iter (function((msg,p)) display msg p) List.rev(l); Sys.exit (-1);
	| e ->
		Stack.dump IO.stderr Stack.exc();
		IO.printf IO.stderr "Exception : %s\n" string(e);
		Sys.exit (-1);
}