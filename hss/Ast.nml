/*
 *  Hss Format
 *  Copyright (c)2008 Nicolas Cannasse
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License or the LICENSE file for more details.
 */

type pos = Lexer.pos

type constant {
	Int : int;
	Float : float;
	String : string;
	Ident : string;
	Val : string;
}

type keyword {
	Var;
	Media;
	Import;
	Keyframes;
	Include;
	PrIf;
	PrElse;
	PrElseIf;
	PrEnd;
}

type op {
	Add;
	Mul;
	Div;
	Sub;
	And;
	Or;
	Xor;
	BoolAnd;
	BoolOr;
}

type token {
	Eof;
	Semicolon;
	Dot;
	Comma;
	Sharp;
	Eq;
	Gt;
	DoubleDot;
	DoubleDotx2;
	Percent;
	Question;
	Exclamation;
	BraceOpen;
	BraceClose;
	ParentOpen;
	ParentClose;
	BracketOpen;
	BracketClose;
	Const : constant;
	Keyword : keyword;
	Comment : string;
	CommentLine : string;
	Selector : (string);
	SelectorFn : (string,string);
	Op : op;
	Tild;
	Dollar;
}

type expr;
type value;

type value_decl {
	VIdent : string;
	VString : string;
	VUnit : (float, string);
	VFloat : float;
	VInt : int;
	VHex : string;
	VList : value list;
	VGroup : value list;
	VUrl : string;
	VVar : string;
	VCall : (value, value list);
	VLabel : (string, value);
	VBind : (string, value);
	VOp :  (op, value, value);
	VParentheses: value;
}

type value = (value_decl , pos)

type operator {
	OpDefault;
	OpChild;
	OpPreceding : bool;
	OpJoint;
}

type attrib_op {
	AExists;
	AEqual : string;
	AContain : string;
	ADash : string;
	ABegin : string;
	AEnd : string;
	ASubstr : string;
}

type pseudo {
	PuClass   : string;
	PuElement : string;
	PuClassFn : (string, string);
}

type class {
	mutable node : (string,pos) option;
	mutable classes : (string,pos) list;
	mutable id : (string,pos) option;
	mutable selector : (pseudo,pos) list;
	mutable sub : class option;
	mutable attributes : ((string,attrib_op),pos) list;
	mutable operator : operator;
}

type media;
type media_decl {
	MAnd: (media, media);
	MType: (string, string option);
	MFeature: (string, value option);
	MList: media list;
	MQuotes: string;
}
type media = (media_decl, pos)

type expr_decl {
	EVar : (string, value);
	EVarBlock : (string, expr list);
	EAttribute : (string, value);
	EUseBlock : (string, value list);
	EBlock : (class list, expr list);
	ESub : expr list;
	EMedia : (media, expr list);
	EInclude : string;
	EImport : string;
	EKeyframes: (string, (value, expr list) list);
}

type expr = (expr_decl , pos)

type rule
type rule_decl {
	RAny;
	RId : string;
	RVal : string; // $vaiable
	RHex : int;
	RUnit : string list;
	RCall : (string, rule);
	RFloat;
	RInt;
	RFloatRange : (float, float);
	RIntRange : (int, int);
	RIdent;
	RString;
	ROr : rule list;
	ROp : (op, rule, rule)
	RList : rule list;  // comma-separated (calls, etc.)
	RGroup : rule list; // no comma
	RBind : (string, rule);
}
type rule = (rule_decl, pos)

function pos((_,x)) { x }

function s_constant(x) {
	match x {
	| Int i -> string i
	| Float s -> string s
	| String s -> "\"" + String.escape s + "\""
	| Val s -> "$" + s
	| Ident s -> s
	}
}

function s_keyword(x) {
	match x {
	| Var -> "var"
	| Media -> "@media"
	| Import -> "@import"
	| Keyframes -> "@keyframes"
	| Include -> "@include"
	| PrIf -> "@if"
	| PrElse -> "@else"
	| PrElseIf -> "@elseif"
	| PrEnd -> "@end"
	}
}

function s_op(o) {
	match o {
	| Add -> "+"
	| Sub -> "-"
	| Mul -> "*"
	| Div -> "/"
	| And -> "&"
	| Or -> "|"
	| Xor -> "^"
	| BoolAnd -> "&&"
	| BoolOr -> "||"
	}
}

function s_token(x) {
	match x {
	| Eof -> "<eof>"
	| Semicolon -> ";"
	| Dot -> "."
	| DoubleDot -> ":"
	| DoubleDotx2 -> "::"
	| Percent -> "%"
	| Comma -> ","
	| Sharp -> "#"
	| Eq -> "="
	| Gt -> ">"
	| Question -> "?"
	| Exclamation -> "!"
	| BraceOpen -> "{"
	| BraceClose -> "}"
	| ParentOpen -> "("
	| ParentClose -> ")"
	| BracketOpen -> "["
	| BracketClose -> "]"
	| Const c -> s_constant c
	| Keyword k -> s_keyword k
	| Comment s -> "/*" + s + "*/"
	| CommentLine s -> "//" + s
	| Selector s -> ":"+s
	| SelectorFn(s,e) -> s+"("+e+")"
	| Op o -> s_op o
	| Tild -> "~"
	| Dollar -> "$"
	}
}

function rec s_value(v) {
	match fst v {
	| VIdent s -> s
	| VUnit (x, u) -> "" + x + u
	| VInt i   -> "" + i
	| VFloat f -> "" + f
	| VString s  -> "\"" + s + "\""
	| VHex s -> "#" + s
	| VVar i -> "$" + i
	| VList l -> String.concat ", " (List.map s_value l)
	| VGroup l -> String.concat " " (List.map s_value l)
	| VCall (n, l) -> (s_value n) + "(" + (s_value (VList l, pos v)) +")"
	| VBind(s, v) -> s + "=" + (s_value v)
	| VOp(op, v1, v2) -> (s_value v1) + " " +(s_op op) + " " + (s_value v2)
	| VUrl u -> "url(\"" + u + "\")"
	| VLabel("dup", v) -> s_value v
	| VLabel(s,v) -> (s_value v) + " !" + s
	| VParentheses v -> "(" + (s_value v) + ")"
	}
}

function rec s_rule(r) {
	match fst r {
	| RId s -> s
	| RAny -> "any"
	| RVal s -> "$" + s
	| RHex n -> var hex = match n {
		| 3 -> "FFF"
		| 6 -> "FFFFFF"
		| 8 -> "FFFFFFFF"
		| _ -> string n
		}
		"#" + hex
	| RUnit l -> "Unit(" + (String.concat " " l) + ")"
	| RCall(s, r) -> var args = match (fst r) {
		| ROr l -> "[" + String.concat(" ", List.map s_rule l) + "]"
		| RList l -> "(" + String.concat(", ", List.map s_rule l) + ")"
		| RGroup l -> "(" + String.concat(" ", List.map s_rule l) + ")"
		| _ -> "(" + s_rule r + ")"
		}
		s + args
	| RFloat -> "float"
	| RInt -> "int"
	| RFloatRange(x, y) ->  if x != y then x + "-" + y else "" + x
	| RIntRange(i, j) -> if i != j then i + "-" + j else "" + i
	| RIdent -> "id"
	| RString -> "string"
	| ROr l -> "OR[ " + String.concat(" ", List.map s_rule l) + " ]"
	| ROp(op, r1, r2) ->  (s_rule r1) + " " + (s_op op) + " " + (s_rule r2)
	| RList l -> "L( " + String.concat(", ", List.map s_rule l) + " )"
	| RGroup l -> "G( " + String.concat(" ", List.map s_rule l) + " )"
	| RBind(s, r) -> s + "=" + (s_rule r)
	}
}
