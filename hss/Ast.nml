/*
 *  Hss Format
 *  Copyright (c)2008 Nicolas Cannasse
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License or the LICENSE file for more details.
 */

type pos = Lexer.pos

type constant {
	Int : int;
	Float : float;
	String : string;
	Ident : string;
	Val : string;
}

type keyword {
	Var;
	Media;
	Import;
	Keyframes;
	Include;
	PrIf;
	PrElse;
	PrElseIf;
	PrEnd;
}

type op {
	Add;
	Mul;
	Div;
	Sub;
	And;
	Or;
	Xor;
	BoolAnd;
	BoolOr;
}

type token {
	Eof;
	Semicolon;
	Dot;
	Comma;
	Sharp;
	Eq;
	Gt;
	DoubleDot;
	DoubleDotx2;
	Percent;
	Exclamation;
	BraceOpen;
	BraceClose;
	ParentOpen;
	ParentClose;
	BracketOpen;
	BracketClose;
	Const : constant;
	Keyword : keyword;
	Comment : string;
	CommentLine : string;
	Selector : (string);
	SelectorCall : (string,string);
	Op : op;
	Tild;
	Dollar;
}

type expr;
type value;

type value_decl {
	VIdent : string;
	VString : string;
	VUnit : (float, string);
	VFloat : float;
	VInt : int;
	VHex : string;
	VList : value list;
	VGroup : value list;
	VUrl : string;
	VVar : string;
	VCall : (value, value list);
	VLabel : (string, value);
	VBind : (string, value);
	VOp :  (op, value, value);
	VParentheses: value;
}

type value = (value_decl , pos)

type operator {
	OpDefault;
	OpChild;
	OpPreceding : bool;
	OpJoint;
}

type attrib_op {
	AExists;
	AEqual : string;
	AContain : string;
	ADash : string;
	ABegin : string;
	AEnd : string;
	ASubstr : string;
}

type pseudo {
	PSelector : string;
	PSelector2 : string; // double colon(::) as prefix
	PSelectorCall : (string, string); // (name, args)
}

type class {
	mutable node : string option;
	mutable classes : string list;
	mutable id : string option;
	mutable selector : pseudo list;
	mutable sub : class option;
	mutable attributes : (string,attrib_op) list;
	mutable operator : operator;
}

type media;
type media_decl {
	MComma;
	MNot;
	MOnly;
	MAnd;
	MType: string;          // screen, all, print, speech
	MAttr: (string, value); // (attr: value)
	MSigAttr: string;       // (attr)
	MQuotes: string;        // "string"
	MParent: media list;    // ()
}
type media = (media_decl, pos)

type expr_decl {
	EVar : (string, value);
	EVarBlock : (string, expr list);
	EAttribute : (string, value);
	EUseBlock : (string, value list);
	EIfDefine: ((string, bool), expr);
	EBlock : (class list, expr list);
	ESub : expr list;
	EMedia : (media list, expr list);
	EInclude : string;
	EImport : value;
	EKeyframes: (string, (value, expr list) list);
}

type expr = (expr_decl , pos)

function pos((_,x)) { x }

function s_constant(x) {
	match x {
	| Int i -> string i
	| Float s -> string s
	| String s -> "\"" + String.escape s + "\""
	| Val s -> "$" + s
	| Ident s -> s
	}
}

function s_keyword(x) {
	match x {
	| Var -> "var"
	| Media -> "@media"
	| Import -> "@import"
	| Keyframes -> "@keyframes"
	| Include -> "@include"
	| PrIf -> "@if"
	| PrElse -> "@else"
	| PrElseIf -> "@elseif"
	| PrEnd -> "@end"
	}
}

function s_op(o) {
	match o {
	| Add -> "+"
	| Sub -> "-"
	| Mul -> "*"
	| Div -> "/"
	| And -> "&"
	| Or -> "|"
	| Xor -> "^"
	| BoolAnd -> "&&"
	| BoolOr -> "||"
	}
}

function s_token(x) {
	match x {
	| Eof -> "<eof>"
	| Semicolon -> ";"
	| Dot -> "."
	| DoubleDot -> ":"
	| DoubleDotx2 -> "::"
	| Percent -> "%"
	| Comma -> ","
	| Sharp -> "#"
	| Eq -> "="
	| Gt -> ">"
	| Exclamation -> "!"
	| BraceOpen -> "{"
	| BraceClose -> "}"
	| ParentOpen -> "("
	| ParentClose -> ")"
	| BracketOpen -> "["
	| BracketClose -> "]"
	| Const c -> s_constant c
	| Keyword k -> s_keyword k
	| Comment s -> "/*" + s + "*/"
	| CommentLine s -> "//" + s
	| Selector s -> ":"+s
	| SelectorCall(s,e) -> s+"("+e+")"
	| Op o -> s_op o
	| Tild -> "~"
	| Dollar -> "$"
	}
}

function rec s_value(v) {
	match fst v {
	| VUnit (x, u) -> "" + x + u
	| VInt i   -> "" + i
	| VFloat f -> "" + f
	| VString s  -> "\"" + s + "\""
	| VHex s -> "#" + s
	| VVar i -> "$" + i
	| VList l -> String.concat ", " (List.map s_value l)
	| VGroup l -> String.concat " " (List.map s_value l)
	| VCall ((VIdent n, _), l) -> n + "(" + (s_value (VList l, pos v)) +")"
	| VOp(op, v1, v2) -> (s_value v1) + " " +(s_op op) + " " + (s_value v2)
	| VUrl u -> "url(\"" + u + "\")"
	| x -> string x
	}
}
