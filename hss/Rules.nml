/*
 *  Hss Format
 *  Copyright (c)2008 Nicolas Cannasse
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License or the LICENSE file for more details.
 */
open Lexer;
open Hss.Ast;
open Hss.Parser;

type rule_expr
type rule_expr_decl {
	REVar : (string, rule);
	REAttribute : (string, rule);
	REBlock : (string list, rule_expr list);
}
type rule_expr = (rule_expr_decl, pos)

function rec begin(s) {
	match s {
	| [< (Eof,_) >] -> []
	| [< r = statement s; p = begin s >] -> r :: p
	}
}

function rec statement(s) {
	match s {
	| [< (Keyword Var,p1); (Const (Ident i),_); (Eq,_); r = rule s; _ = semicolon_or_ended s r >] ->
		(REVar(i, r), punion p1 (pos r))
	| [< (Const (Ident att),p1); (DoubleDot,_); r = rule s; _ = semicolon_or_ended s r >] ->
		(REAttribute(att, r), punion p1 (pos r))
	| [< ns = namespace s; (BraceOpen, p); l = statement_list s >] ->
		(REBlock(ns, l), p)
	}
}

function rec namespace(s) {
	var id = match s {
	| [< (DoubleDotx2,_); (Const (Ident id), _) >] -> "::" + id
	| [< (Const (Ident id), _) >] -> id
	| [< (Selector id, _) >] -> ":" + id
	| [< >] -> ""
	}
	if id == "" then [] else id :: namespace_next s
}

function rec namespace_next(s) {
	match s {
	| [< (Comma,_); n = namespace s >] -> n
	| [< >] -> []
	}
}

function rec statement_list(s) {
	match s {
	| [< (BraceClose,_) >] -> []
	| [< re = statement s >] -> re :: (statement_list s)
	}
}

function rec rule(s) {
	var r = match s {
	| [< (BracketOpen, p1); r = rule s; (BracketClose, p2) >] ->
		match fst r {
		| RList (_,p1) :: (_,p2) :: _ -> error Message("Unexpected " + "'" + ","  +"'") gap(p1, p2)
		| _ ->
		}
		(ROr [r], punion p1 p2)
	| [< (ParentOpen, p1); r = rule s; (ParentClose, p2) >] ->
		(match fst r {
		| ROr l -> RGroup l
		| RList l -> RList l
		| _ -> RGroup [r]
		}, punion p1 p2)
	| [< (Const (Int i), p) >] ->
		(RIntRange(i, i), p)
	| [< (Const (Float f), p) >] ->
		(RFloatRange(f, f), p)
	| [< (Const (Ident i), p) >] ->
		(match i {
		| "id" -> RIdent
		| "int" -> RInt
		| "float" -> RFloat
		| "string" -> RString
		| _ -> RId i
		}, p)
	| [< (Op Mul, p) >] -> (RAny , p)
	| [< (Const (String s), p) >] ->
		(RId s, p)
	| [< (Sharp, p1); (Const (Ident i), p2) >] ->
		if (!contiguous(p1, p2)) then
			error(Unexpected (Const (Ident i)), p2);
		(RHex(String.length i), punion p1 p2)
	| [< (Const (Val s), p) >] ->
		(RVal s, p)
	};
	rule_next r s
}

function rec rule_next(r1, s) {
	match s {
	| [< (Comma, _); r2 = rule s >] ->
		(match fst r2 {
		| RList l -> RList (r1 :: l)
		| _ -> RList [r1; r2]
		}, punion(pos r1, pos r2))
	| [< (Eq, p); r2 = rule s >] ->
		var v1, p1 = r1
		var v2, p2 = r2
		var def = match v1 {
		| RId name ->
			match fst r2 {
			| ROr (r2 :: l) -> ROr((RBind(name, r2), punion p1 (pos r2)) :: l)
			| RList (r2 :: l) -> RList((RBind(name, r2), punion p1 (pos r2)) :: l)
			| _ -> RBind(name, r2)
			}
		| _ -> error (Unexpected Eq) p
		}
		(def, punion p1 p2)
	| [< (Op o, po) >] ->
		var p1 = pos r1;
		match (contiguous p1 po, o) {
		| (true, Add) | (true, Mul) ->
			var name = match o {
			| Add -> "Plus"
			| _ -> "Star"
			}
			rule_next (RCall(name, r1), punion p1 po) s
		| _ ->
			rule_binop o r1 (rule s)
		}
	| [< (BraceOpen, p2); r2 = rule s; (BraceClose, p3) >] ->
		var r2 = match fst r2 { // convert {i,j} to {i-j}
		| RList [(RIntRange(i,ii), _) as r1; (RIntRange(j,jj), _) as r2] when i == ii && j == jj ->
			(RIntRange(i, j), pos r2);
		| RList _ ->
			error Message("Syntax Error, Should be {i,j}") (pos r2)
		| _ ->
			r2
		}
		var rv = (RList [r1; r2], punion p2 p3);
		rule_next (RCall("Rep", rv), punion (pos r1) p3) s
	| [< r2 = rule s >] ->
		rule_join r1 r2
	| [<  >] ->
		var tk, p = stream_token s 0
		var name = match tk {
		| Sharp -> "Many"      // #
		| Question -> "Opt"    // ?
		| Tild -> "AnyOrder"   // ~
		| _ -> ""
		}
		match (name, fst r1) {
		| ("", _) -> r1
		| _ ->
			stream_junk s 1;
			rule_next (RCall(name, r1), punion(pos r1, p)) s
		}
	}
}

function rec rule_join(r1, r2) {
	var v1, p1 = r1;
	var v2, p2 = r2;
	var p = punion p1 p2;
	match (contiguous p1 p2, v1) {
	| (true, RId name) ->
		function calls_merge(name, p1, r2) {
			match r2 {
			| (RCall(ctl, e), p2) ->
				Some (RCall(ctl, (RCall(name, e), p2) ), punion p1 p2)
			| _ ->
				None
			}
		}
		function has_brackets(v) match v {
		| ROr _ | RList _ | RGroup _ | RCall _ -> true
		| _ -> false
		}
		// '?', '*', '+', '{}', '#' and '~' will move to the front
		// func(x, y)? b c; ==> func..[Opt(any); b; c] --> [Opt(func(x, y)); b; c]
		match v2 {
		| ROr (((v21, p21) as r21) :: l)
		| RList (((v21, p21) as r21) :: l) when (contiguous p1 p21) && (has_brackets v21) ->
			var r = match calls_merge name p1 r21 {
			| Some r -> r
			| _ -> (RCall(name, r21), punion p1 p21)
			}
			match v2 {
			| ROr _ -> (ROr (r :: l), p)
			| RList _ -> (RList (r :: l), p)
			| _ -> r2 // dummy
			}
		| ROr _
		| RList _
		| RGroup _ ->
			(RCall(name, r2), p)
		| _ ->
			match calls_merge name p1 r2 {
			| Some r -> r
			| _ -> rule_join_simple r1 r2
			}
		}
	| _ ->
		rule_join_simple r1 r2
	}
}

function rec rule_join_simple(r1, r2) (
	match fst r2 {
	| ROr l -> ROr (r1 :: l)
	| RList (r2::l) -> RList ((rule_join_simple r1 r2) :: l)
	| _  -> ROr [r1; r2]
	}, punion(pos r1, pos r2)
)

// '-' > '/'
function rec rule_binop(o1, r1, r2) (
	match fst r2 {
	| ROr(r2 :: l) -> ROr(rule_binop o1 r1 r2 :: l)
	| RList(r2 :: l) -> RList(rule_binop o1 r1 r2 :: l)
	| ROp(o2, r2, r3) when o1 == Sub -> ROp o2 (rule_binop o1 r1 r2) r3
	| _ -> ROp(o1, r1, r2)
	}, punion(pos r1, pos r2)
)

function rec s_rule_expr(re) {
	match fst re {
	| REVar(name, r) -> "var " + name + " = " + (s_rule r) + ";\n"
	| REAttribute(name, r) -> name + " : " + (s_rule r) + ";\n"
	| REBlock(ns, l) -> (String.concat "," ns) + (if l == [] then "{" else " {\n\t") + String.concat("\t", List.map s_rule_expr l) + "}"
	}
}

type context {
	mutable vars : (string, rule) Map.t;
	mutable eval_rec : int;
	mutable rules : (string, (string, rule) Hashtbl.t) Map.t;
	mutable current : (string, rule) Hashtbl.t;
}

function flatten_units(r) {
	function rec loop(acc, x) {
		match fst x {
		| RId s ->
			s :: acc
		| RUnit l ->
			List.append l acc
		| RGroup l | ROr l | RList l ->
			List.fold loop acc l
		| _ ->
			error Message("UnSupported " + "'" + (s_rule x) + "'") (pos x)
		}
	}
	var v, p = r
	match v {
	| RGroup l | ROr l | RList l ->
		(RUnit(List.fold loop [] l), p)
	| RId i ->
		(RUnit [i], p)
	| _ ->
		error Message("UnSupported " + "'" + (s_rule r) + "'") p
	}
}

function rec eval(ctx, r) {
	var d, p = r
	match d {
	| RInt
	| RAny
	| RFloat
	| RIdent
	| RString
	| RId _
	| RHex _
	| RUnit _
	| RIntRange _
	| RFloatRange _ ->
		r
	| RVal name ->
		if ctx.eval_rec > 100 then error (Message "Invalid loop in variable expension") p;
		var val = (try Map.find ctx.vars name catch { Not_found -> error Message("Variable not declared '" + name + "'") p });
		ctx.eval_rec := ctx.eval_rec + 1;
		var r = eval ctx val;
		ctx.eval_rec := ctx.eval_rec - 1;
		r
	| RGroup [r] | ROr [r] | RList [r] -> // if single
		eval ctx r
	| RGroup rl ->
		(RGroup(List.map (eval ctx) rl), p)
	| ROr rl ->
		(ROr(List.map (eval ctx) rl), p)
	| RList rl ->
		(RList(List.map (eval ctx) rl), p)
	| RBind (name, r2) ->
		(RBind(name, eval ctx r2), p)
	| ROp(o, r1, r2) ->
		var r1 = eval ctx r1;
		var r2 = eval ctx r2;
		function single_number(r) {
			var v, p = r;
			match v {
			| RIntRange(i, j) when i == j -> true
			| RFloatRange(f, g) when f == g -> true
			| _ -> false
			}
		}
		match o {
		| Sub when single_number(r1) && single_number(r2) -> // convert (e - e) to range
			var pos = punion (pos r1) (pos r2);
			match (fst r1, fst r2) {
			| (RIntRange(i, _), RIntRange(j, _)) ->
				(RIntRange(i, j), pos)
			| (RIntRange(i, _), RFloatRange(f, _)) ->
				(RFloatRange(i * 1.0, f), pos)
			| (RFloatRange(f, _), RFloatRange(g, _)) ->
				(RFloatRange(f, g), pos)
			| (RFloatRange(f, _), RIntRange(i, _)) ->
				(RFloatRange(f, i * 1.0), pos)
			| _ ->
				r // dummy
			}
		| _ ->
			(ROp(o, r1, r2), p)
		}
	| RCall(name, r) ->
		var r = eval ctx r;
		match name {
		| "Unit" -> flatten_units r
		| "LOG" -> printf "LOG : %s\n" (s_rule r); r;
		| _ -> (RCall(name, r), p)
		}
	}
}

function rec recording(ctx, e) {
	var v, p = e;
	match v {
	| REVar(name, rule) ->
		ctx.vars := Map.add ctx.vars name rule;
	//	e
	| REAttribute(attr, rule) ->
		var rule = eval ctx rule;
		Hashtbl.add ctx.current attr rule;
	//	(REAttribute(attr, rule), p)
	| REBlock (ns, el) ->
		var old = (ctx.vars, ctx.current);
		match ns {
		| [] ->
		| name :: _ ->
			ctx.current := try Map.find ctx.rules name catch {
			| Not_found ->
				var tbl = Hashtbl.create();
				List.fold (function(acc, x){ctx.rules := Map.add(ctx.rules, x, acc); acc}) tbl ns
			}
		}
		var el = List.map (recording ctx) el;
		ctx.vars := fst old;
		ctx.current := snd old;
	//	(REBlock(name, el), p)
	}
}

function fractional_part(f) {
	var f = if f >= 0. then (f + 0.0000001) else -(f - 0.0000001); // Math.abs
	f - (Math.ffloor f) > 0.0000019
}

function rec is_optional(rl) {
	match rl {
	| [] -> true
	| r :: rl ->
		var succ = match fst r {
		| RCall(n,_) when n == "Opt" || n == "Star" -> true
		| RCall("Rep", (RList [_; (RIntRange(m, _),_)],_)) -> m <= 0
		| _ -> false
		}
		if succ then is_optional rl else false
	}
}

function vtl_pop(vtl) {
	match *vtl {
	| _ :: vl -> vtl := vl
	| _ ->
	}
}

function vtl_push(vtl, v) vtl := v :: *vtl

/*
function rec check_print( acc : int, rl : rule list, vl : value list ) {
	match (rl, vl) {
	| ([], []) ->
	| (r :: rl, v :: vl) ->
		var sv = match fst v {| VParentheses _ -> "---" | _ -> s_value v}
		printf ">>> i : %d, r : %s - v : %s\n" (acc, s_rule r, sv);
		check_print(acc + 1, rl, vl);
	| ([], v :: vl) ->
		var sv = match fst v {| VParentheses _ -> "---" | _ -> s_value v}
		printf ">>> i : %d, r : %s - v : %s\n" (acc, "[]", sv);
		check_print(acc + 1, [], vl);
	| (r :: rl, []) ->
		printf ">>> i : %d, r : %s - v : %s\n" (acc, s_rule r, "[]");
		check_print(acc + 1, rl, []);
	}
}
*/

function is_empty_match(vtl, v) {
	match *vtl {
	| [] -> false
	| x :: _ -> x === v
	}
}

function barrier_push(vtl, v) {
	vtl := (VParentheses v, pos v) :: *vtl;
}

function barrier_pop(vtl, v) {
	var ept = is_empty_match vtl v;
	vtl_pop vtl;
	if ept then {
		vtl_pop vtl;
		vtl_push vtl v;
	}
}

/*
 * @param vtl : The stack of values
 */
function rec check( vtl : value list ref, v : value, r ) : bool {
	match (fst r, fst v) {
	| (RAny, _)
	| (RFloat, VInt _)
	| (RFloat, VFloat _)
	| (RInt, VInt _)
	| (RIdent, VIdent _)
	| (RString, VString _) ->
		 true
	| (RId s, VIdent n) ->
		s == n
	| (_, VLabel(s, v)) ->
		var succ = check vtl v r && *vtl == [];
		if  s == "error" then throw (if succ then Core.Error "Expect an error : " else Exit) else succ
	| (RCall(name, r), _) ->
		check_calls vtl v r name
	| (ROr rl, _) ->
		check_bracket vtl v rl
	| (RHex n, VHex s) ->
		String.length s == n
	| (RUnit l, VUnit(_,s))->
		List.mem s l
	| (RInt, VFloat f) ->
		!(fractional_part f)
	| (RIntRange(min, max), VInt n) ->
		n >= min && n <= max
	| (RIntRange(min, max), VFloat f) ->
		!(fractional_part f) && f >= min * 1.0 && f <= max * 1.0
	| (RFloatRange(min, max), VInt n) ->
		n * 1.0 >= min && n * 1.0 <= max
	| (RFloatRange(min, max), VFloat n) ->
		n >= min && n <= max
	| (RBind(s, r), VBind(n, v)) when s == n ->
		check vtl v r
	| (ROp (s, r1, r2), VOp(o, v1, v2)) ->
		(s == Xor || s == o) && check vtl v1 r1 && check vtl v2 r2 // "^" matches arbitrary ops
	| _ ->
		check_complex vtl v r check_normal_groups
	}
}

function rec check_bracket(vtl, v, rl) {
	match rl {
	| [] ->
		false
	| r :: rl ->
		var scs = check vtl v r;
		var ept = is_empty_match vtl v;
		if ept then
			vtl_pop vtl;
		if scs then scs else check_bracket vtl v rl
	}
}

function rec check_complex(vtl, v, r, check_callback) {
	var restore = *vtl;
	var succ = match (fst r, fst v) {
	| (x, VGroup vl) ->
		vtl := List.append vl (*vtl);
		match x {
		| RGroup rl -> check_callback vtl rl false
		| RList _ -> false
		| _ -> check_callback vtl [r] false
		}
	| (x, VList vl) ->
		vtl := List.append vl (*vtl);
		var rl = match x {
		| RList rl -> rl
		| _ -> [r]
		}
		check_callback vtl rl true;
	| (RGroup rl, x) ->
		match x {
		//| VGroup vl ->    // already matched
		| VList _ -> false  // fails
		| _ ->
			vtl_push vtl v; // no separator. think: r(A (B C) D) v(A B C D)
			check_callback vtl rl false;
		}
	| (RList rl, x) -> // func(A, B?) -- func(A)
		vtl_push vtl v;
		check_callback vtl rl false
	| _ ->
		//printf "UnMatched rule : %s, value : %s\n" (s_rule r, s_value v);
		false
	}
	if (!succ) then
		vtl := restore;
	succ
}
function rec check_normal_groups(vtl, rl, sep) {
	var scs = match (rl, *vtl) {
	| (_, (VParentheses _,_) :: _) ->
		is_optional rl
	| (r :: rl, v :: vl) ->
		vtl := vl;
		// printf "(%s) stack : %d, rule : '%s', value : '%s'\n" (if sep then "sep" else "non", List.length (*vtl), s_rule r, s_value v);
		// Insert a separator as a barrier to prevents "check_repeat" out of bounds
		if sep then barrier_push vtl v;
		var scs = (check vtl v r);
		if sep then barrier_pop vtl v;
		scs && (check_normal_groups vtl rl sep)
	| _ ->
		is_optional rl
	}
	scs
}

function rec check_repeat_inner(acc, vtl, r, min, max) {
	var succ = acc >= min;
	match *vtl {
	| (VParentheses _,_) :: _ ->
		succ
	| v :: vl when max == 0 || acc < max ->
		vtl := vl;
		var scs = check vtl v r
		var ept = is_empty_match vtl v;
		// Nested Opt or Star may match nothing but still return true
		if scs && !ept then {
			check_repeat_inner (acc + 1) vtl r min max
		} else {
			// ept means nested Opt or Star has already pushed a v to vtl
			if !ept then
				vtl_push vtl v;
			succ
		}
	| _ -> // means (acc != 0 && acc == max) or (vtl == []) then do nothing
		succ
	}
}
function rec check_repeat(vtl, v, r, min, max) {
	vtl_push vtl v;
	check_repeat_inner 0 vtl r min max;
}

// ensure that at least one match is made
function rec check_unordered(vtl, rl, sep) {
	var succ = is_optional rl;
	match *vtl {
	| [] -> succ
	| v :: vl ->
		match (fst v) {
		| VParentheses _ -> succ
		| _ ->
			vtl := vl;
			if sep then barrier_push vtl v;
			var rl, succ = check_unordered_inner vtl [] v rl;
			if sep then barrier_pop  vtl v;
			if succ then check_unordered vtl rl sep else is_optional rl
		}
	}
}
function rec check_unordered_inner(vtl, acc, v, rl) {
	match rl {
	| [] ->
		vtl_push vtl v; // if 'v' is not matched then put it back.
		(acc, false)
	| r :: rl ->
		var scs = check vtl v r
		var ept = is_empty_match vtl v;
		// Opt(), Star() will put v back to *vtl if matches empty.
		if scs && !ept then {
			(List.append acc rl, true)
		} else {
			if ept then
				vtl_pop vtl;
			check_unordered_inner vtl (r :: acc) v rl
		}
	}
}

function rec check_calls(vtl, v, r, name) {
	match name {
	| "Opt" ->
		check_repeat vtl v r 0 1
	| "Star" ->
		check_repeat vtl v r 0 0
	| "Plus" ->
		check_repeat vtl v r 1 0
	| "Rep" -> match fst r {
		| RList [r; (RIntRange(i, j), _)] -> check_repeat vtl v r i j
		| _ -> false
		}
	| "Many" -> // Similar to Plus, But only for VList(,)
		match fst v {
		| VList vl -> List.all (function (v) check vtl v r) vl
		| _ -> check vtl v r
		}
	| "AnyOrder" ->
		match (fst r, fst v) {
		| (RCall(name, r), VCall(c, v)) ->
			// AnyOrder( func(a, b, c) ) --> func( AnyOrder(a b c) )
			var r, v = calls_unify r v;
			check vtl c (RId name, pos r) && check_complex vtl v r check_unordered
		| _ ->
			check_complex vtl v r check_unordered
		}
	| _ ->
		match (fst v) {
		| VCall(c, v) ->
			var r, v = calls_unify r v;
			check vtl c (RId name, pos r) && check vtl v r
		| _ ->
			false
		}
	}
}

function rec calls_unify(r, v) {
	function rec adv_mode(rl) match rl {
	| [] -> false
	| r :: rl -> match fst r {
		| RCall(s, _) when s == "Rep" || s == "Plus" || s == "Star" -> true
		| _ -> adv_mode rl
		}
	}
	// adv requires that the input must be VList
	var adv = match fst r {
	| RList rl -> adv_mode rl;
	| _ -> adv_mode [r]
	}
	// Transform "RList" to RGroup for matching, otherwise "Rep","Plus" will fails
	var r = if !adv then r else match fst r {
	| RList rl -> (RGroup rl, pos r)
	| RGroup (_,p1) :: (_,p2) :: _ -> error(Message "Expected ','", gap p1 p2)
	| _ -> r
	}
	// Transfrom "VList" to VGroup if adv is true
	var v = if !adv then v else match fst v {
	| VGroup (_,p1) :: (_,p2) :: _ -> error(Message "Expected ','", gap p1 p2);
	| VList [x] -> x
	| VList vl -> (VGroup vl, pos v)
	| _ -> v
	}
	(r, v)
}

var globals = Hashtbl.create()
var special = Hashtbl.create()
var context = {
	vars = Map.empty();
	rules = Map.add(Map.add(Map.empty(), "rules-globals", globals), "rules-special", special);
	current = globals;
	eval_rec = 0;
}

function loadfile(rule, cssdir) {
	var tool = Hss.Utils.pathtools
	var file = &rule;
	if !(Sys.exists rule) then {
		if cssdir != "" then {
			file := cssdir + "/" + rule
		}
		if !Sys.exists(*file) then {
			file := tool.path_dir tool.sys_program_path() + "/" + rule
			if !Sys.exists(*file) then throw (Core.Error rule)
		}
	}
	var chs = IO.read_file (*file) true
	var lex = Lexer.create Buffer.create();
	Lexer.input lex (*file) chs 1 0;
	var el = Hss.Parser.parse(begin, lex);
	List.iter (recording context) el;
}

var mode_append = &false
var file_custom = &""
var loaded = &false
function load(def, cssdir) {
	var input = *file_custom;
	try {
		if (input == "" || *mode_append == true) then
			loadfile(def, cssdir);
		if (input != "") then
			loadfile(input, cssdir);
		loaded := true
	} catch {
	| Core.Error s ->
		printf "Skipped check because %s was not found.\n" s
	}
}
function append() {
	mode_append := true
}

function custom(f) {
	file_custom := f
}
