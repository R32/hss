/*
 *  Hss Format
 *  Copyright (c)2008 Nicolas Cannasse
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License or the LICENSE file for more details.
 */

// based on http://reference.sitepoint.com/css

type rule_option {
	ONormal;
	OOpt;
	OMany;
}

type rule {
	RId : string;
	RHex : int;
	RUnit : string;
	RCall : (rule,rule);
	RFloat;
	RInt;
	RFloatRange : (float,float);
	RIntRange : (int, int);
	RIdent;
	RString;
	ROr : rule list;
	RMany : rule;
	RList : rule list; // comma-separated (calls, etc.)
	RGroup : rule list; // no comma
	RBind : (string, rule);
	RGroupOpt : rule list;
	RListCustom : (rule, rule_option) list;
}

function ids(l) { List.map RId l }

var selectors = [
	"first-child";"link";"visited";"active";"hover";"focus";"first-letter";"first-line";"before";"after"; // CSS 2.1
	"root";"last-child";"first-of-type";"last-of-type";"only-child";"only-of-type";"empty";"target";"enabled";"disabled";"checked" // CSS 3.0
]

var allow_duplicate_attributes = [
	"src"; // @font-face
];

var runits = [RUnit "px";RUnit "em";RUnit "%";RUnit "pt"; RIntRange 0 0]
var units = ROr runits
var rflex_direction = [RId "row"; RId "row-reverse"; RId "column"; RId "column-reverse"; RId "initial"; RId "inherit"]
var rflex_wrap = [ RId "wrap"; RId "nowrap"; RId "wrap-reverse"; RId "initial"; RId "inherit" ]
var col = ROr [RIntRange 0 255;RUnit "%"]
var alpha = RFloatRange 0. 1.
var color = List.append [
	RHex 3; RHex 6;
	RCall (RId "rgb") (RList [col;col;col]);
	RCall (RId "rgba") (RList [col;col;col;RFloatRange 0. 1.]);
	RCall (RId "rgba") (RList [RHex 3;RFloatRange 0. 1.]);
	RCall (RId "rgba") (RList [RHex 6;RFloatRange 0. 1.]);
] (ids ["aqua";"black";"blue";"fuchsia";"gray";"grey";"green";"lime";"maroon";"navy";"olive";"orange";"purple";"red";"silver";"teal";"white";"yellow"])

var trans_color = RId "transparent" :: color

var bstyle = ids ["none";"solid";"hidden";"dotted";"dashed";"double"]

var border = [
	RIntRange 0 0;
	RId "none";
	RUnit "px";
	RGroup [RUnit "px";ROr bstyle;ROr trans_color];
]

var url = RCall RId("url") RList([RString])

var inherit = RId "inherit"

var lst = ids ["circle";"disc";"square";"decimal";"lower-alpha";"lower-roman";"upper-alpha";"upper-roman";"none"]
var lsp = ids ["inside";"outside"]

var none = RId "none"

var horiz = ids ["left";"right";"center"]
var vert = ids ["top";"bottom";"center"]

var runits_auto = RId "auto" :: runits
var units_auto = ROr runits_auto

var hunits = ROr (List.append horiz runits)
var vunits = ROr (List.append vert runits)

var bgpos = [hunits; RGroup [hunits;vunits];RGroup [ROr vert;ROr horiz];]
var bgrepeat = ids ["repeat";"repeat-x";"repeat-y";"no-repeat"]
var bgattach = ids ["scroll";"fixed"]

var outline_width = List.append runits (ids ["thin";"medium";"thick"])
var border_width = outline_width;

var font_size = List.append runits (ids ["xx-small";"x-small";"small";"medium";"large";"x-large";"xx-large";"smaller";"larger"])
var font_family = RMany ROr([RIdent;RString;RGroup [RIdent;RIdent]]) // can be composed of up to 2 words
var font_style = ids ["italic";"normal";"oblique"]
var font_variant = ids ["normal";"small-caps"]
var font_weight = List.append (ids ["bold";"normal";"bolder";"lighter"]) [RIntRange 100 100;RIntRange 200 200;RIntRange 300 300;RIntRange 400 400;RIntRange 500 500;RIntRange 600 600;RIntRange 700 700]

var font_face_src = RMany (ROr [url;RGroup [url;RCall RId("format") RList([RString])]])

var angle = [RUnit "deg";RUnit "rad";RUnit "grad";RUnit "turn"]
var gradient_color = [ROr color; RGroup [ROr color; RUnit "%"]]

var bgcolor = trans_color

var bgfilters =
	[
		RCall (RId "linear-gradient") RListCustom([(ROr List.concat([bgpos;angle]),OOpt); (ROr gradient_color, ONormal); (ROr gradient_color, ONormal); (ROr gradient_color, OMany)]);
	]


var transform_function = {
	var num = RFloat;
	var trans = ROr [RFloat; RUnit "px"];
	var angle = ROr [RFloat; RUnit "deg"; RUnit "rad"];
	var len = RFloat;
	ROr [
		RCall (RId "matrix") (RList [num;num;num;num;num;num]);
		RCall (RId "translate") (RList [trans;trans]);
		RCall (RId "translate") trans;
		RCall (RId "translateX") trans;
		RCall (RId "scale") (RList [num;num]);
		RCall (RId "scale") num;
		RCall (RId "scaleX") num;
		RCall (RId "scaleY") num;
		RCall (RId "rotate") angle;
		RCall (RId "skew") angle;
		RCall (RId "skew") (RList [angle;angle]);
		RCall (RId "skewX") angle;
		RCall (RId "skewY") angle;
		RCall (RId "matrix3d") (RList [num;num;num;num;num;num;num;num;num;num;num;num;num;num;num;num]);
		RCall (RId "translate3d") (RList [trans;trans;len]);
		RCall (RId "translateZ") len;
		RCall (RId "scale3d") (RList [num;num;num]);
		RCall (RId "scaleZ") num;
		RCall (RId "rotate3d") (RList [num;num;num;angle]);
		RCall (RId "rotateX") angle;
		RCall (RId "rotateY") angle;
		RCall (RId "rotateZ") angle;
		RCall (RId "perspective") len;
	];
}

var rules = List.concat [[
	// Units
	("width",runits_auto);
	("height",runits_auto);
	("top",runits);
	("bottom",runits);
	("left",runits);
	("right",runits);
	("margin-left",runits_auto);
	("margin-right",runits_auto);
	("margin-top",runits);
	("margin-bottom",runits);
	("margin",[RGroup [units;units_auto;units;units_auto];units_auto; RGroup [units_auto;units_auto]]);
	("padding-left",runits);
	("padding-right",runits);
	("padding-top",runits);
	("padding-bottom",runits);
	("min-width",runits);
	("min-height",runits);
	("max-width",none :: runits);
	("max-height",none :: runits);
	("line-height",RFloat :: runits);
	("padding",[RGroup [units;units;units;units];units; RGroup [units;units]]);
];[
	// layout
	("display",ids ["block";"inline";"none";"inline-block";"table";"inline-table";"table-row";"table-row-group";"table-header-group";"table-footer-group";"table-column";"table-column-group";"table-cell";"table-caption";"flex";"inline-flex"]);
	("float",ids ["left";"right";"none"]);
	("clear",ids ["none";"left";"right";"both"]);
	("overflow",ids ["auto";"hidden";"scroll";"visible"]);
    ("overflow-x",ids ["auto";"hidden";"scroll";"visible"]);
    ("overflow-y",ids ["auto";"hidden";"scroll";"visible"]);
	("position",ids ["absolute";"fixed";"relative";"static"]);
	("z-index",[RInt;RId "auto"]);
	("visibility",ids ["visible";"hidden"]);
	// clip ?
];[
	// Fonts and texts
	("font",[
		RGroupOpt [ROr font_style;ROr font_variant;ROr font_weight;font_family]; // no support for /line-height notation
		ROr (ids ["caption";"icon";"menu";"message-box";"small-caption";"status-bar"]);
	]);
	("font-family",[font_family]);
	("font-size",font_size);
	("font-variant",font_variant);
	("font-weight",font_weight);
	("text-align",ids ["center";"justify";"left";"right"]);
	("text-decoration",ids ["none";"underline";"blink";"line-through";"overline"]);
	("font-style",font_style);
	("color",color);
	("text-transform",ids ["capitalize";"lowercase";"none";"uppercase"]);
	("letter-spacing",RId "normal" :: runits);
	("word-spacing",RId "normal" :: runits);
	("text-indent", runits);
	("vertical-align",List.append runits (ids ["top";"bottom";"middle";"baseline";"sub";"super";"text-bottom";"text-top"]));
	("white-space", ids ["normal";"pre";"nowrap";"pre-wrap";"pre-line"]);
	("tab-size", [RInt]);
	("line-break", ids ["auto";"loose";"normal";"strict"]);
	("word-break", ids ["normal";"keep-all";"break-all"]);
	("direction", ids ["ltr";"rtl"]);
];[
	// background
	("background",[
		none;
		RGroupOpt [ROr bgcolor;url;ROr bgrepeat;ROr bgattach;vunits;hunits];
		RGroupOpt [ROr bgcolor;url;ROr bgrepeat;ROr bgattach;hunits;vunits];
		ROr bgfilters;
	]);
	("background-color",bgcolor);
	("background-image",[url; none]);
	("background-position",bgpos);
	("background-repeat",bgrepeat);
	("background-attachment",bgattach);
];[
	// borders
	("border",border);
	("border-style",bstyle);
	("border-top",border);
	("border-left",border);
	("border-right",border);
	("border-bottom",border);
	("border-width",[RGroupOpt [ROr border_width;ROr border_width;ROr border_width; ROr border_width]]);
	("border-top-width",border_width);
	("border-left-width",border_width);
	("border-right-width",border_width);
	("border-bottom-width",border_width);
	("border-top-color",trans_color);
	("border-left-color",trans_color);
	("border-right-color",trans_color);
	("border-bottom-color",trans_color);
	("border-left-style",bstyle);
	("border-right-style",bstyle);
	("border-top-style",bstyle);
	("border-bottom-style",bstyle);
	("border-bottom",border);
	("border-color",[RGroupOpt [ROr trans_color; ROr trans_color; ROr trans_color; ROr trans_color]]);
	("outline",[none;RGroup [ROr outline_width; ROr bstyle; ROr color]]);
	("outline-style",bstyle);
	("outline-width",outline_width);
	("outline-color",color);
];[
	// others
	("cursor", ids ["auto";"hand";"crosshair";"default";"e-resize";"help";"move";"n-rsize";"ne-resize";"nw-resize";"pointer";"progress";"s-resize";"se-resize";"sw-resize";"text";"w-resize";"wait"]);
	("opacity", [alpha]);
	("list-style", [ROr lst;url;RGroup [ROr lst;ROr lsp; url]]);
	("list-style-type", lst);
	("list-style-position", lsp);
	("list-style-image", [url;none]);
	("table-layout", ids ["auto";"fixed"]);
	("border-collapse",ids ["collapse";"separate"]);
	("border-spacing",runits); // not supported on IE
	("caption-side", ids ["bottom";"top"]);
	("user-select", ids ["all";"none";"text"]);
	("resize", ids ["none";"both";"horizontal";"vertical"]);
];[
	// transforms
	("transform", [RMany transform_function]);
	("transform-origin", [ROr runits;
		ROr (ids ["left";"center";"right";"top";"bottom"]);
		RGroup [
			ROr (List.append runits (ids ["left";"center";"right"]));
			ROr (List.append runits (ids ["left";"center";"right"]))
		]]);
	("perspective-origin", [ROr runits;
		ROr (ids ["left";"center";"right";"top";"bottom"]);
		RGroup [
			ROr (List.append runits (ids ["left";"center";"right"]));
			ROr (List.append runits (ids ["left";"center";"right"]))
		]]);
	("transform-style", ids ["flat";"preserve-3d"]);
	("persepective", [RId "none";RFloat]);
	("backface-visible", ids ["visible";"hidden"]);
];[
	// effects (partial browser support)
	("border-radius",runits);
	("border-top-right-radius",runits);
	("border-top-left-radius",runits);
	("border-bottom-right-radius",runits);
	("border-bottom-left-radius",runits);
	("text-shadow",[
		RId "none";
		RMany (ROr [
			RGroup [units; units; ROr color];
			RGroup [units; units; units; ROr color]
		])
	]);
	("box-shadow",[
		RId "none";
		RMany (ROr [
			RGroup [units; units; ROr color];
			RGroup [units; units; units; ROr color];
			RGroup [units; units; units; units; ROr color];
			RGroup [RId "inset"; units; units; ROr color];
			RGroup [RId "inset"; units; units; units; ROr color];
			RGroup [RId "inset"; units; units; units; units; ROr color];
		])
	]);
	// hss-specific
	("hss-width",runits_auto);
	("hss-height",runits_auto);
];[
	//flex
	("flex-direction",rflex_direction);
	("flex-wrap", rflex_wrap);
	("flex-flow", [
			RGroup [ROr rflex_direction; ROr rflex_wrap];
			RId "initial";
			RId "inherit";
		]);
	("flex-grow", [ RInt; RId "initial"; RId "inherit" ]);
	("flex-shrink", [ RInt; RId "initial"; RId "inherit" ]);
	("flex-basis", [ RInt; RId "auto"; RId "initial"; RId "inherit" ]);
	("align-items", [RId "stretch"; RId "center"; RId "flex-start"; RId "flex-end"; RId "baseline"; 	RId "initial"; RId "inherit"]);
	("justify-content", [RId "space-between"; RId "space-around"; RId "center"; RId "flex-start"; RId "flex-end"; RId "initial"; RId "inherit"]);
	("align-self", [RId "auto"; RId "flex-start"; RId "flex-end"; RId "center"; RId "baseline"; RId "stretch"]);
	("order", [RInt]);
]];

