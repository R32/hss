/*
 *  Hss Format
 *  Copyright (c)2008 Nicolas Cannasse
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License or the LICENSE file for more details.
 */
exception Error : (string, Lexer.pos);

// "-webkit-user-select" => ("user-select","-webkit-")
function vendor_prefix(s: string) {
	if String.get(s, 0) == '-' then {
		var len = String.length s;
		if      len > 8 && String.sub(s, 0, 8) == "-webkit-" then
			(String.sub(s, 8, len - 8), "-webkit-")
		else if len > 5 && String.sub(s, 0, 5) == "-moz-" then
			(String.sub(s, 5, len - 5), "-moz-")
		else if len > 4 && String.sub(s, 0, 4) == "-ms-" then
			(String.sub(s, 4, len - 4), "-ms-")
		else if len > 3 && String.sub(s, 0, 3) == "-o-" then
			(String.sub(s, 3, len - 3), "-o-")
		else
			(s, "")
	} else
		(s, "")
}

// #99AABB => (0x99, 0xAA, 0xBB)
function ofhex(h: string, p: Lexer.pos) {
	match String.length h {
	| 3 ->
		var r = int ("0x" + String.sub h 0 1);
		var g = int ("0x" + String.sub h 1 1);
		var b = int ("0x" + String.sub h 2 1);
		(r * 16 + r,g*16+g,b*16+b)
	| 6 ->
		(int ("0x" + String.sub h 0 2), int ("0x" + String.sub h 2 2), int ("0x" + String.sub h 4 2))
	| _ ->
		throw Error("Invalid color value #" + h, p);
	}
}

function rgb2hsl(ir: int, ig: int, ib: int) {
	var r = max 0. min(1., ir / 255.);
	var g = max 0. min(1., ig / 255.);
	var b = max 0. min(1., ib / 255.);
	var max = max(max(r, g), b);
	var min = min(min(r, g), b);
	var l = (max + min) / 2.;
	if (max == min) then
		(0., 0., l)
	else {
		var d = max - min;
		var s = if l > 0.5 then d / (2 - max - min) else d / (max + min);

		var h = if max == r then
			(g - b) / d + (if g < b then 6. else 0.)
		else if max == g then
			(b - r) / d + 2.
		else
			(r - g) / d + 4.;
		(h/6., s, l)
	}
}

function hue2rgb(p: float, q:float, t: float) {
	var t = if t < 0. then t + 1. else t;
	var t = if t > 1. then t - 1. else t;
	if t < 1/6. then
		p + (q - p) * 6. * t
	else if t < 1/2. then
		q
	else if t < 2/3. then
		p + (q - p) * (2/3. - t) * 6.
	else
		p
}

function hsl2rgb(h:float, s:float, l:float) {
	if (s <= 0.) then {
		var r = Math.round((max 0. (min 1. l)) * 255);
		(r, r, r)
	} else {
		var q = if l < 0.5 then l * (1. + s) else l + s - l * s;
		var p = 2. * l - q;
		var r = max 0. (min 1. hue2rgb(p, q, h + 1/3.));
		var g = max 0. (min 1. hue2rgb(p, q, h));
		var b = max 0. (min 1. hue2rgb(p, q, h - 1/3.));
		(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255))
	}
}

function colormix(hex: string, hp: Lexer.pos, dh: float, ds: float, dl: float): string {
	var r, g, b = ofhex hex hp;
	var h, s, l = rgb2hsl r g b;
	var r, g, b = hsl2rgb(h + dh, s + ds, l + dl);
	sprintf "%.6X" ((r << 16) or (g << 8) or b)
}

var base64_encode_table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var base_encode : string -> string -> string = neko "$loader.loadprim('std@base_encode',2)";

function img_to_base64(org_path: string, p: Lexer.pos): string {
	var parent: Hss.Path.path = Hss.Path.find(Lexer.source p);
	var path = if (parent.dir == "") then org_path else parent.dir + "/" + org_path;
	try {
		var content = IO.file_contents(path);
		var content_len = String.length content;
		var extra = content_len % 3;
		var size: int = ((content_len + 2) / 3) << 2;
		if size > 32768 then {                        // 32K
			IO.printf IO.stderr "%s%s:%d: %s\n" ("Warning: ", path, Lexer.line p, "Image size exceeds 24K and will not be embedded.");
			throw Exit;
		}
		var prefix = "data:image/png;base64,";
		var prefix_len = String.length prefix;
		var out = String.create(prefix_len + size);
		String.blit(out, 0, prefix, 0, prefix_len);
		var sign = ord(String.get content 0) + (ord(String.get content 1) << 8);
		match sign {
		| 0xD8FF -> String.blit(out, 11, "jpg", 0, 3) // "jpg"
		| 0x5089 -> ()                                // "png"
		| 0x4947 -> String.blit(out, 11, "gif", 0, 3) // "gif"
		| _ -> throw Error("Unsupported image type: " + path, p)
		}
		var extra = match extra {
		| 2 -> String.set(out, prefix_len + size - 1, '='); 1
		| 1 -> String.set(out, prefix_len + size - 1, '='); String.set(out, prefix_len + size - 2, '='); 2
		| _ -> extra                                  // 0
		}
		String.blit(out, prefix_len, base_encode(content, base64_encode_table), 0, size - extra);
		out
	} catch {
	| Exit -> org_path
	| (Error _) as err -> throw err
	| _ -> throw Error("Cannot find the file: " + path, p)
	}
}
