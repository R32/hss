/*
 *  Hss Format
 *  Copyright (c)2008 Nicolas Cannasse
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License or the LICENSE file for more details.
 */
exception Error : (string, Lexer.pos);

// "-webkit-user-select" => ("user-select","-webkit-")
function vendor_prefix(s: string) {
	if String.get(s, 0) == '-' then {
		var len = String.length s;
		if      len > 8 && String.sub(s, 0, 8) == "-webkit-" then
			(String.sub(s, 8, len - 8), "-webkit-")
		else if len > 5 && String.sub(s, 0, 5) == "-moz-" then
			(String.sub(s, 5, len - 5), "-moz-")
		else if len > 4 && String.sub(s, 0, 4) == "-ms-" then
			(String.sub(s, 4, len - 4), "-ms-")
		else if len > 3 && String.sub(s, 0, 3) == "-o-" then
			(String.sub(s, 3, len - 3), "-o-")
		else
			(s, "")
	} else
		(s, "")
}

// #99AABB => (0x99, 0xAA, 0xBB)
function ofhex(h: string, p: Lexer.pos) {
	match String.length h {
	| 3 ->
		var r = int ("0x" + String.sub h 0 1);
		var g = int ("0x" + String.sub h 1 1);
		var b = int ("0x" + String.sub h 2 1);
		(r * 16 + r,g*16+g,b*16+b)
	| 6 ->
		(int ("0x" + String.sub h 0 2), int ("0x" + String.sub h 2 2), int ("0x" + String.sub h 4 2))
	| _ ->
		throw Error("Invalid color value #" + h, p);
	}
}
// Assumes r, g, and b are contained in the set [0, 255]
function rgb2hsl(ir: int, ig: int, ib: int) {
	var r = ir / 255.
	var g = ig / 255.
	var b = ib / 255.
	var max = max(max(r, g), b);
	var min = min(min(r, g), b);
	var l = (max + min) / 2.;
	if (max == min) then
		(0., 0., l)
	else {
		var d = max - min;
		var s = if l > 0.5 then d / (2 - max - min) else d / (max + min);

		var h = if max == r then
			(g - b) / d + (if g < b then 6. else 0.)
		else if max == g then
			(b - r) / d + 2.
		else
			(r - g) / d + 4.;
		(h/6., s, l)
	}
}

function hue2rgb(p: float, q:float, t: float) {
	var t = if t < 0. then t + 1. else (if t > 1. then t - 1. else t)
	if t < 1/6. then
		p + (q - p) * 6. * t
	else if t < 1/2. then
		q
	else if t < 2/3. then
		p + (q - p) * (2/3. - t) * 6.
	else
		p
}

function hsl2rgb(h:float, s:float, l:float) {
	if (s <= 0.) then {
		var r = Math.round((max 0. (min 1. l)) * 255);
		(r, r, r)
	} else {
		var s = min 1.0 s;
		var h = max 0. (min 1. h);
		var l = max 0. (min 1. l);
		var q = if l < 0.5 then l * (1. + s) else l + s - l * s;
		var p = 2. * l - q;
		var r = hue2rgb(p, q, h + 1/3.);
		var g = hue2rgb(p, q, h);
		var b = hue2rgb(p, q, h - 1/3.);
		(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255))
	}
}

// Path
var file_full_path: string -> string = neko("$loader.loadprim('std@file_full_path',1)");

function is_abs_path(s) {
	match String.length s {
	| 0 -> false
	| 1 -> '/' == String.get(s, 0)
	| _ -> ':' == String.get(s, 1) || '/' == String.get(s, 0)
	}
}

function last_char(s: string, c: char): int {
	function rec loop(i) {
		match i {
		| -1 -> i
		| _ -> if String.get(s, i) == c then i else loop(i - 1)
		}
	}
	loop((String.length s) - 1)
}

function without_extension(s) {
	match (last_char s '.') {
	| -1 -> s
	| i -> String.sub s 0 i
	}
}

type path {
	dir : string; // without trailing slash
	name: string;
	ext : string;
	full: string;
}
var path_imports: path list ref = &[];

function path_add(path) {
	path_imports := path::(*path_imports);
}

function path_find(full) {
	function rec loop(l){
		match l {
		| [] -> throw Not_found
		| x::tl -> if x.full == full then x else loop tl
		}
	}
	loop(*path_imports)
}

function path_duplicate(path):bool {
	function rec loop(l, full) {
		match l {
		| [] -> false
		| x::tl -> if full == without_extension(x.full) then true else loop tl full
		}
	}
	loop (*path_imports) without_extension(path.full)
}

function path_str(path):string {
	(if path.dir == "" then path.name else path.dir + "/" + path.name)
	+
	(if path.ext == "" then "" else "." + path.ext)
}

function relative_path(full: string):string {
	try {
		path_str(path_find full)
	} catch {
	| Not_found -> full
	}
}

function path_make(s: string, def_ext: string):path {
	var last = (String.length s) - 1
	var c1, c2 = (last_char s '/', last_char s '\\')
	var dir, name = if c1 < c2 then
		(String.sub(s, 0, c2), String.sub(s, c2 + 1, last - c2))
	else if c2 < c1 then
		(String.sub(s, 0, c1), String.sub(s, c1 + 1, last - c1))
	else
		("", s)
	var cp = last_char name '.'
	var ext, name = if cp != -1 then
		(String.sub(name, cp + 1, (String.length name) - 1 - cp), String.sub(name, 0, cp))
	else
		(def_ext, name)
	{
		dir  = dir;
		name = name;
		ext  = ext;
		full = file_full_path(if def_ext == "" then s else s + "." + def_ext);
	}
}

var base64_encode_table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var base_encode : string -> string -> string = neko "$loader.loadprim('std@base_encode',2)";

function img_to_base64(path: string, p: Lexer.pos): string {
	if String.sub(path, 0, 4) == "http" then throw Error("Image embedding for local files only", p);
	var parent: path = path_find(Lexer.source p);
	var path = if (parent.dir == "") then path else parent.dir + "/" + path;
	var content = try {
		IO.file_contents(path);
	} catch {
	| _ -> throw Error("file error: " + path, p)
	}
	var content_len = String.length content;
	var extra = content_len % 3;
	var size: int = ((content_len + 2) / 3) << 2;
	if size > 32768 then {                        // 32K
		throw Error("Image size should be limited to 24K: " + path, p)
	}
	var prefix = "data:image/png;base64,";
	var prefix_len = String.length prefix;
	var out = String.create(prefix_len + size);
	String.blit(out, 0, prefix, 0, prefix_len);
	var sign = ord(String.get content 0) + (ord(String.get content 1) << 8);
	match sign {
	| 0xD8FF -> String.blit(out, 11, "jpg", 0, 3) // "jpg"
	| 0x5089 -> ()                                // "png"
	| 0x4947 -> String.blit(out, 11, "gif", 0, 3) // "gif"
	| _ -> throw Error("UnSupported Type: " + path, p)
	}
	var extra = match extra {
	| 2 -> String.set(out, prefix_len + size - 1, '='); 1
	| 1 -> String.set(out, prefix_len + size - 1, '='); String.set(out, prefix_len + size - 2, '='); 2
	| _ -> extra                                  // 0
	}
	String.blit(out, prefix_len, base_encode(content, base64_encode_table), 0, size - extra);
	out
}
